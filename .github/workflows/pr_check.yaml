name: Check PR

on:
  pull_request:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12.14
        env:
          POSTGRES_USER: timecard
          POSTGRES_PASSWORD: timecard
          POSTGRES_DB: timecard
        ports:
          - 5432:5432
        volumes:
          - postgres-data:/var/lib/postgresql/data/
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Setup Pipenv && Install Dependencies (Including dev packages)
        uses: ./.github/actions/setup-pipenv
        with:
          dev: true

      - name: Generate requirements.txt
        run: |
          pipenv requirements --dev > ./docker/dev/dev_reqs.txt
          pipenv requirements > ./docker/prod/requirements.txt

      - name: Check for changes
        run: |
          git diff --exit-code ./docker/dev/dev_reqs.txt
          git diff --exit-code ./docker/prod/requirements.txt

      - name: Run Tests with Coverage and Enforce 80% Threshold
        run: |
          pipenv run coverage run --source='.' manage.py test --settings timecard.settings.dev
          pipenv run coverage report -m
          COVERAGE=$(pipenv run coverage report -m | tail -n 1 | awk '{print $6}' | sed 's/%//')
          if (( $(echo "$COVERAGE < 80" |bc -l) )); then
            echo "Code coverage is below 80%"
            exit 1
          fi

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Setup Pipenv
        uses: ./.github/actions/setup-pipenv
        with:
          dev: true

      - name: Lint with flake8
        run: |
          pipenv run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          pipenv run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=migrations

  static-code-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Setup Pipenv
        uses: ./.github/actions/setup-pipenv
        with:
          dev: true

      - name: Static Code Analysis with bandit
        run: pipenv run bandit -r .

  dependency-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Setup Pipenv
        uses: ./.github/actions/setup-pipenv
        with:
          dev: true

      - name: Check Dependencies with pipenv
        run: pipenv check

  paths-check-terraform:
    runs-on: ubuntu-latest
    outputs:
      terraform_changed: ${{ steps.filter.outputs.terraform_changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Check for changes in Terraform directory
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            terraform_changed:
              - 'terraform/**'

  terraform-lint:
    runs-on: ubuntu-latest
    needs: paths-check-terraform
    if: ${{ needs.paths-check-terraform.outputs.terraform_changed == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Terraform Lint
        run: |
          terraform fmt -check
          terraform init
          terraform validate

  terraform-plan:
    runs-on: ubuntu-latest
    needs: [ paths-check-terraform, terraform-lint ]
    if: ${{ needs.paths-check-terraform.outputs.terraform_changed == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform cloud
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.5"
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Plan
        run: |
          cd terraform/production && 
          terraform init &&
          terraform plan
